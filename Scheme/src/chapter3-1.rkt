#lang racket

(require "symbol.rkt")

(define (make-accumulator initial)
  (define (add x)
    (set! initial (+ initial x))
    initial)
  (define (sub x)
    (set! initial (- initial x))
    initial)
  (define (dispatch op x)
    (cond ((equal? op 'add) (add x))
          ((equal? op 'sub) (sub x))
          (else (error "Unknown operator!"))))
  dispatch)

;(define num (make-accumulator 100))
;(num 'add 10)
;(num 'sub 20)

(define (rand-update initial)
  (define (next x)
    (remainder (+ 261 (* 31 x)) 65535))
  (define (generate)
    (set! initial (next initial))
    initial)
  (define (reset x)
    (set! initial x)
    x)
  (define (dispatch op)
    (cond ((equal? op 'generate) generate)
          ((equal? op 'reset) reset)
          (else (error "Unknown operator!"))))
  dispatch)

;(define rnd (rand-update 37))
;((rnd 'generate))
;((rnd 'generate))
;((rnd 'generate))
;((rnd 'reset) 37)
;((rnd 'generate))
;((rnd 'generate))
;((rnd 'generate))

